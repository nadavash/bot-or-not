// source: messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.message.AnswerCorrectMessage', null, global);
goog.exportSymbol('proto.message.BotOrNotMessage', null, global);
goog.exportSymbol('proto.message.ChatMessage', null, global);
goog.exportSymbol('proto.message.GameOverMessage', null, global);
goog.exportSymbol('proto.message.MessageType', null, global);
goog.exportSymbol('proto.message.PlayAgainMessage', null, global);
goog.exportSymbol('proto.message.RoomConnectionSuccessMessage', null, global);
goog.exportSymbol('proto.message.ServerConnectionSuccessMessage', null, global);
goog.exportSymbol('proto.message.WrapperMessage', null, global);
goog.exportSymbol('proto.message.WrapperMessage.MessageCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.WrapperMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.message.WrapperMessage.oneofGroups_);
};
goog.inherits(proto.message.WrapperMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.WrapperMessage.displayName = 'proto.message.WrapperMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.ServerConnectionSuccessMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.ServerConnectionSuccessMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.ServerConnectionSuccessMessage.displayName = 'proto.message.ServerConnectionSuccessMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.RoomConnectionSuccessMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.RoomConnectionSuccessMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.RoomConnectionSuccessMessage.displayName = 'proto.message.RoomConnectionSuccessMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.ChatMessage.displayName = 'proto.message.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.GameOverMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.GameOverMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.GameOverMessage.displayName = 'proto.message.GameOverMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.PlayAgainMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.PlayAgainMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.PlayAgainMessage.displayName = 'proto.message.PlayAgainMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.BotOrNotMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.BotOrNotMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.BotOrNotMessage.displayName = 'proto.message.BotOrNotMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.AnswerCorrectMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.AnswerCorrectMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.AnswerCorrectMessage.displayName = 'proto.message.AnswerCorrectMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.message.WrapperMessage.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.message.WrapperMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SERVER_SUCCESS: 2,
  ROOM_SUCCESS: 3,
  CHAT: 4,
  GAME_OVER: 5,
  BOT_OR_NOT: 6,
  PLAY_AGAIN: 7,
  ANSWER_CORRECT: 8
};

/**
 * @return {proto.message.WrapperMessage.MessageCase}
 */
proto.message.WrapperMessage.prototype.getMessageCase = function() {
  return /** @type {proto.message.WrapperMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.message.WrapperMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.WrapperMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.WrapperMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.WrapperMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.WrapperMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverSuccess: (f = msg.getServerSuccess()) && proto.message.ServerConnectionSuccessMessage.toObject(includeInstance, f),
    roomSuccess: (f = msg.getRoomSuccess()) && proto.message.RoomConnectionSuccessMessage.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.message.ChatMessage.toObject(includeInstance, f),
    gameOver: (f = msg.getGameOver()) && proto.message.GameOverMessage.toObject(includeInstance, f),
    botOrNot: (f = msg.getBotOrNot()) && proto.message.BotOrNotMessage.toObject(includeInstance, f),
    playAgain: (f = msg.getPlayAgain()) && proto.message.PlayAgainMessage.toObject(includeInstance, f),
    answerCorrect: (f = msg.getAnswerCorrect()) && proto.message.AnswerCorrectMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.WrapperMessage}
 */
proto.message.WrapperMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.WrapperMessage;
  return proto.message.WrapperMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.WrapperMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.WrapperMessage}
 */
proto.message.WrapperMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.message.MessageType} */ (reader.readEnum());
      msg.setMessageType(value);
      break;
    case 2:
      var value = new proto.message.ServerConnectionSuccessMessage;
      reader.readMessage(value,proto.message.ServerConnectionSuccessMessage.deserializeBinaryFromReader);
      msg.setServerSuccess(value);
      break;
    case 3:
      var value = new proto.message.RoomConnectionSuccessMessage;
      reader.readMessage(value,proto.message.RoomConnectionSuccessMessage.deserializeBinaryFromReader);
      msg.setRoomSuccess(value);
      break;
    case 4:
      var value = new proto.message.ChatMessage;
      reader.readMessage(value,proto.message.ChatMessage.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    case 5:
      var value = new proto.message.GameOverMessage;
      reader.readMessage(value,proto.message.GameOverMessage.deserializeBinaryFromReader);
      msg.setGameOver(value);
      break;
    case 6:
      var value = new proto.message.BotOrNotMessage;
      reader.readMessage(value,proto.message.BotOrNotMessage.deserializeBinaryFromReader);
      msg.setBotOrNot(value);
      break;
    case 7:
      var value = new proto.message.PlayAgainMessage;
      reader.readMessage(value,proto.message.PlayAgainMessage.deserializeBinaryFromReader);
      msg.setPlayAgain(value);
      break;
    case 8:
      var value = new proto.message.AnswerCorrectMessage;
      reader.readMessage(value,proto.message.AnswerCorrectMessage.deserializeBinaryFromReader);
      msg.setAnswerCorrect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.WrapperMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.WrapperMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.WrapperMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.WrapperMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getServerSuccess();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.message.ServerConnectionSuccessMessage.serializeBinaryToWriter
    );
  }
  f = message.getRoomSuccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.message.RoomConnectionSuccessMessage.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.message.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getGameOver();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.message.GameOverMessage.serializeBinaryToWriter
    );
  }
  f = message.getBotOrNot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.message.BotOrNotMessage.serializeBinaryToWriter
    );
  }
  f = message.getPlayAgain();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.message.PlayAgainMessage.serializeBinaryToWriter
    );
  }
  f = message.getAnswerCorrect();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.message.AnswerCorrectMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageType message_type = 1;
 * @return {!proto.message.MessageType}
 */
proto.message.WrapperMessage.prototype.getMessageType = function() {
  return /** @type {!proto.message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.message.MessageType} value
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ServerConnectionSuccessMessage server_success = 2;
 * @return {?proto.message.ServerConnectionSuccessMessage}
 */
proto.message.WrapperMessage.prototype.getServerSuccess = function() {
  return /** @type{?proto.message.ServerConnectionSuccessMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.ServerConnectionSuccessMessage, 2));
};


/**
 * @param {?proto.message.ServerConnectionSuccessMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setServerSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearServerSuccess = function() {
  return this.setServerSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasServerSuccess = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RoomConnectionSuccessMessage room_success = 3;
 * @return {?proto.message.RoomConnectionSuccessMessage}
 */
proto.message.WrapperMessage.prototype.getRoomSuccess = function() {
  return /** @type{?proto.message.RoomConnectionSuccessMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.RoomConnectionSuccessMessage, 3));
};


/**
 * @param {?proto.message.RoomConnectionSuccessMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setRoomSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearRoomSuccess = function() {
  return this.setRoomSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasRoomSuccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChatMessage chat = 4;
 * @return {?proto.message.ChatMessage}
 */
proto.message.WrapperMessage.prototype.getChat = function() {
  return /** @type{?proto.message.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.ChatMessage, 4));
};


/**
 * @param {?proto.message.ChatMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setChat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearChat = function() {
  return this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasChat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GameOverMessage game_over = 5;
 * @return {?proto.message.GameOverMessage}
 */
proto.message.WrapperMessage.prototype.getGameOver = function() {
  return /** @type{?proto.message.GameOverMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.GameOverMessage, 5));
};


/**
 * @param {?proto.message.GameOverMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setGameOver = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearGameOver = function() {
  return this.setGameOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasGameOver = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BotOrNotMessage bot_or_not = 6;
 * @return {?proto.message.BotOrNotMessage}
 */
proto.message.WrapperMessage.prototype.getBotOrNot = function() {
  return /** @type{?proto.message.BotOrNotMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.BotOrNotMessage, 6));
};


/**
 * @param {?proto.message.BotOrNotMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setBotOrNot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearBotOrNot = function() {
  return this.setBotOrNot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasBotOrNot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PlayAgainMessage play_again = 7;
 * @return {?proto.message.PlayAgainMessage}
 */
proto.message.WrapperMessage.prototype.getPlayAgain = function() {
  return /** @type{?proto.message.PlayAgainMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.PlayAgainMessage, 7));
};


/**
 * @param {?proto.message.PlayAgainMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setPlayAgain = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearPlayAgain = function() {
  return this.setPlayAgain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasPlayAgain = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AnswerCorrectMessage answer_correct = 8;
 * @return {?proto.message.AnswerCorrectMessage}
 */
proto.message.WrapperMessage.prototype.getAnswerCorrect = function() {
  return /** @type{?proto.message.AnswerCorrectMessage} */ (
    jspb.Message.getWrapperField(this, proto.message.AnswerCorrectMessage, 8));
};


/**
 * @param {?proto.message.AnswerCorrectMessage|undefined} value
 * @return {!proto.message.WrapperMessage} returns this
*/
proto.message.WrapperMessage.prototype.setAnswerCorrect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.message.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.WrapperMessage} returns this
 */
proto.message.WrapperMessage.prototype.clearAnswerCorrect = function() {
  return this.setAnswerCorrect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.WrapperMessage.prototype.hasAnswerCorrect = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.ServerConnectionSuccessMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.ServerConnectionSuccessMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.ServerConnectionSuccessMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ServerConnectionSuccessMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    welcomeMessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.ServerConnectionSuccessMessage}
 */
proto.message.ServerConnectionSuccessMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.ServerConnectionSuccessMessage;
  return proto.message.ServerConnectionSuccessMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.ServerConnectionSuccessMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.ServerConnectionSuccessMessage}
 */
proto.message.ServerConnectionSuccessMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWelcomeMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.ServerConnectionSuccessMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.ServerConnectionSuccessMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.ServerConnectionSuccessMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ServerConnectionSuccessMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWelcomeMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string welcome_message = 1;
 * @return {string}
 */
proto.message.ServerConnectionSuccessMessage.prototype.getWelcomeMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.ServerConnectionSuccessMessage} returns this
 */
proto.message.ServerConnectionSuccessMessage.prototype.setWelcomeMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.RoomConnectionSuccessMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.RoomConnectionSuccessMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.RoomConnectionSuccessMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.RoomConnectionSuccessMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.RoomConnectionSuccessMessage}
 */
proto.message.RoomConnectionSuccessMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.RoomConnectionSuccessMessage;
  return proto.message.RoomConnectionSuccessMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.RoomConnectionSuccessMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.RoomConnectionSuccessMessage}
 */
proto.message.RoomConnectionSuccessMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.RoomConnectionSuccessMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.RoomConnectionSuccessMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.RoomConnectionSuccessMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.RoomConnectionSuccessMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 room_id = 1;
 * @return {number}
 */
proto.message.RoomConnectionSuccessMessage.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.message.RoomConnectionSuccessMessage} returns this
 */
proto.message.RoomConnectionSuccessMessage.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.ChatMessage}
 */
proto.message.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.ChatMessage;
  return proto.message.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.ChatMessage}
 */
proto.message.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.message.ChatMessage.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.ChatMessage} returns this
 */
proto.message.ChatMessage.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.message.ChatMessage.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.ChatMessage} returns this
 */
proto.message.ChatMessage.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.message.ChatMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.ChatMessage} returns this
 */
proto.message.ChatMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.GameOverMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.GameOverMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.GameOverMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameOverMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.GameOverMessage}
 */
proto.message.GameOverMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.GameOverMessage;
  return proto.message.GameOverMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.GameOverMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.GameOverMessage}
 */
proto.message.GameOverMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.GameOverMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.GameOverMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.GameOverMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameOverMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.PlayAgainMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.PlayAgainMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.PlayAgainMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.PlayAgainMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    playAgain: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.PlayAgainMessage}
 */
proto.message.PlayAgainMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.PlayAgainMessage;
  return proto.message.PlayAgainMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.PlayAgainMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.PlayAgainMessage}
 */
proto.message.PlayAgainMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlayAgain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.PlayAgainMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.PlayAgainMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.PlayAgainMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.PlayAgainMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayAgain();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool play_again = 1;
 * @return {boolean}
 */
proto.message.PlayAgainMessage.prototype.getPlayAgain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.message.PlayAgainMessage} returns this
 */
proto.message.PlayAgainMessage.prototype.setPlayAgain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.BotOrNotMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.BotOrNotMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.BotOrNotMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.BotOrNotMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    arePlayersBots: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.BotOrNotMessage}
 */
proto.message.BotOrNotMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.BotOrNotMessage;
  return proto.message.BotOrNotMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.BotOrNotMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.BotOrNotMessage}
 */
proto.message.BotOrNotMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setArePlayersBots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.BotOrNotMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.BotOrNotMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.BotOrNotMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.BotOrNotMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArePlayersBots();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool are_players_bots = 1;
 * @return {boolean}
 */
proto.message.BotOrNotMessage.prototype.getArePlayersBots = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.message.BotOrNotMessage} returns this
 */
proto.message.BotOrNotMessage.prototype.setArePlayersBots = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.AnswerCorrectMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.message.AnswerCorrectMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.AnswerCorrectMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.AnswerCorrectMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCorrectAnswer: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.AnswerCorrectMessage}
 */
proto.message.AnswerCorrectMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.AnswerCorrectMessage;
  return proto.message.AnswerCorrectMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.AnswerCorrectMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.AnswerCorrectMessage}
 */
proto.message.AnswerCorrectMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCorrectAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.AnswerCorrectMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.AnswerCorrectMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.AnswerCorrectMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.AnswerCorrectMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsCorrectAnswer();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_correct_answer = 1;
 * @return {boolean}
 */
proto.message.AnswerCorrectMessage.prototype.getIsCorrectAnswer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.message.AnswerCorrectMessage} returns this
 */
proto.message.AnswerCorrectMessage.prototype.setIsCorrectAnswer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.message.MessageType = {
  SERVER_CONNECTION_SUCCESS: 0,
  ROOM_CONNECTION_SUCCESS: 1,
  CHAT: 2,
  GAME_OVER: 3,
  BOT_OR_NOT: 4,
  PLAY_AGAIN: 5,
  ANSWER_CORRECT: 6
};

goog.object.extend(exports, proto.message);
